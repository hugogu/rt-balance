version: '3'
services:
  transaction-service-api:
    image: app-transaction-service:0.0.1-SNAPSHOT
    ports:
      - "8082:8082"
      - "5005:5005"
    environment:
      # Used only when the value are specific to the environment.
      - SERVER_PORT=8082
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - postgres
  account-service-api:
    image: app-account-service:0.0.1-SNAPSHOT
    ports:
      - "8080:8080"
      - "5005:5005"
    environment:
      - DB_HOST=postgres
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - redis
      - postgres
  postgres:
    image: "postgres:17-alpine"
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=account
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./tmp/pgdata:/var/lib/postgresql/data

  redis:
    image: "redis:7-alpine"
    hostname: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  zookeeper:
    image: zookeeper:3.5.8
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    platform: linux/amd64
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,LOCAL://0.0.0.0:29092
      # When it is used for local, `localhost` shall be used.
      # When it is used within docker, `kafka` shall be used.
      # Use 9092 from docker host, 29092 from local host
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,LOCAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LOCAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

# The following components are used for monitoring the application in stress test and resiliency test.
# In production, these components are not required as production may have its own monitoring tools.

  kpow:
    image: factorhouse/kpow-ce
    restart: always
    ports:
      - "3001:3000"
    depends_on:
      - kafka
    env_file:
      - local.env

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./load-testing/prometheus:/etc/prometheus/
    command:
      - '--web.enable-remote-write-receiver'
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - INFLUXDB_API_TOKEN=secret_token
      - INFLUXDB_ORG=Hugo
      - INFLUXDB_DEFAULT_BUCKET=k6
    volumes:
      - ./load-testing/grafana:/etc/grafana/provisioning/

  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    environment:
      - INFLUXD_LOG_LEVEL=debug
      - INFLUXD_HTTP_BIND_ADDRESS=:8086
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=root
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=Hugo
      - DOCKER_INFLUXDB_INIT_BUCKET=k6
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=secret_token
      - DOCKER_INFLUXD_SESSION_LENGTH=1440
    volumes:
      - ./tmp/influxdb:/var/lib/influxdb

