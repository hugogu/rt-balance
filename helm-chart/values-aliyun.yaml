ingress:
  enabled: true
  host: localhost
  timeout: 30s

redis:
  enabled: true
  image: redis:7-alpine
  port: 6379

accountService:
  image: app-account-service:0.0.1-SNAPSHOT
  replicas: 2
  tomcat:
    thread: 8
  jvm:
    thread: 100
  db:
    host: <id>.pg.rds.aliyuncs.com
    user: <user>
    password:
    connectionTimeout: 2000
  redis:
    host: redis
  kafka:
    bootstrapServers: kafka:9092
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60

transactionService:
  image: app-transaction-service:0.0.1-SNAPSHOT
  replicas: 1
  tomcat:
    thread: 4
  jvm:
    thread: 100
  db:
    host: <id>.pg.rds.aliyuncs.com
    user: <user>
    password:
    connectionTimeout: 2000
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
  accountService:
    url: http://account-service

postgres:
  image: postgres:17-alpine
  accountDb:
    enabled: false
    name: account
  transactionDb:
    enabled: false
    name: trans

kafka:
  enabled: true
  image: wurstmeister/kafka:2.13-2.7.0
  replicas: 1

zookeeper:
  enabled: true
  image: zookeeper:3.5.8
  replicas: 1

# The liveness and readiness probes are used to only accept request when the service is fully started.
# Depending on the resource allocation, it may take 3 to 75 seconds to start the service.
probes:
  liveness:
    httpGet:
      path: /actuator/health/liveness
      port: 8080
    failureThreshold: 3
    successThreshold: 1
    initialDelaySeconds: 40
    periodSeconds: 20
    timeoutSeconds: 20
  readiness:
    httpGet:
      path: /actuator/health/readiness
      port: 8080
    # When all instances become unready, the service will be unavailable and return 503.
    # So it should be cautious to set the failureThreshold.
    failureThreshold: 3
    successThreshold: 1
    initialDelaySeconds: 45
    periodSeconds: 5
    timeoutSeconds: 20

