plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.0.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '2.0.10'
    id 'org.springframework.boot' version '3.2.11' apply(false)
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.jetbrains.kotlin.plugin.jpa' version '2.0.10'
    id 'jacoco'
    id "io.gitlab.arturbosch.detekt" version "1.23.7"
}

group = 'io.github.hugogu'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    detekt
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'jacoco'
    apply plugin: "io.gitlab.arturbosch.detekt"

    group = 'io.github.hugogu'
    version = '0.0.1-SNAPSHOT'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    kotlin {
        compilerOptions {
            freeCompilerArgs.addAll '-Xjsr305=strict'
            freeCompilerArgs.addAll '-Xjvm-default=all'
        }
    }

    detekt {
        config.setFrom("${rootDir}/detekt.yml")
    }

    allOpen {
        annotation 'jakarta.persistence.Entity'
        annotation 'jakarta.persistence.MappedSuperclass'
        annotation 'jakarta.persistence.Embeddable'
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.3"
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.2.11"
        }
    }

    configurations.configureEach {
        resolutionStrategy.eachDependency {
            if (requested.group == "org.jetbrains.kotlin") {
                useVersion("2.0.10")
            }
        }
    }

    dependencies {
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.javamoney:moneta:1.4.2'
        implementation 'org.zalando:jackson-datatype-money:1.3.0'
        implementation 'org.hibernate:hibernate-core:6.6.2.Final'
        implementation 'org.flywaydb:flyway-core'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation 'org.springframework.kafka:spring-kafka'
        runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
        runtimeOnly 'org.postgresql:postgresql'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
        testImplementation 'org.springframework.kafka:spring-kafka-test'
        testImplementation "org.mockito.kotlin:mockito-kotlin:5.4.0"
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        detekt 'io.gitlab.arturbosch.detekt:detekt-cli:1.23.7'
    }

    test {
        useJUnitPlatform {
            // Exclude integration test that requires a local account-service to be running.
            excludeTags 'require-account'
        }
        reports {
            junitXml.required = true
        }
        finalizedBy jacocoTestReport
    }

    jacoco {
        toolVersion = "0.8.12"
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = true
            csv.required = true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }
}

tasks.named("detekt").configure {
    reports {
        // Enable/Disable XML report (default: true)
        xml.required.set(true)
        xml.outputLocation.set(file("build/reports/detekt.xml"))
        // Enable/Disable HTML report (default: true)
        html.required.set(true)
        html.outputLocation.set(file("build/reports/detekt.html"))
        // Enable/Disable TXT report (default: true)
        txt.required.set(true)
        txt.outputLocation.set(file("build/reports/detekt.txt"))
        // Enable/Disable SARIF report (default: false)
        sarif.required.set(true)
        sarif.outputLocation.set(file("build/reports/detekt.sarif"))
        // Enable/Disable MD report (default: false)
        md.required.set(true)
        md.outputLocation.set(file("build/reports/detekt.md"))
        custom {
            // The simple class name of your custom report.
            reportId = "CustomJsonReport"
            outputLocation.set(file("build/reports/detekt.json"))
        }
    }
}
